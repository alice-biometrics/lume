{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lume \ud83d\udd25","text":""},{"location":"#what-is-lume","title":"What is lume?","text":"<p>A handy Python-based automation tool. It can be thought of as a vitaminized <code>Makefile</code>. </p>"},{"location":"#how-could-lume-help-me","title":"How could lume help me?","text":"<p><code>lume</code> helps you sort your commands, allows you to abstract from the development environment and facilitates CI and CD workflows. Use the <code>lume.yml</code> to define all your daily project commands. </p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p><code>bowie</code> inspired us! \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f</p> <p></p> <p>Years ago, we started with the idea of creating a tool to standardize all the commands of the different projects, when most of the <code>lume</code> maintenance team was working in the Galician research center, Gradiant.  There, we developed the wonderful <code>bowie</code> package. We know that this package is still active in several internal projects of the research center, so long live <code>bowie</code> and thanks to the Gradiant team for the initial impulse.</p>"},{"location":"acknowledgements/#_1","title":"\ud83d\udc4c","text":""},{"location":"changelog/","title":"Changelog","text":"<p>Review the Github Releases</p>"},{"location":"contributing/","title":"Contributing to lume","text":"<p>We'd love you to contribute to lume \ud83e\udd73\ud83e\udd73\ud83e\udd73\ud83e\udd73\ud83e\udd73\ud83e\udd73\ufe0f!</p> <ul> <li>Questions, feature requests and bug reports are all welcome as discussions or issues. </li> <li>However, to report a security vulnerability, please see our security policy.</li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#check-if-a-command-is-available","title":"Check if a command is available","text":"<p>You can check if a command exist use <code>lume -check &lt;COMMAND-TO-CHECK&gt;</code></p> <p>Example when check existent command (in <code>lume.yml</code>):</p> <pre><code>$ lume -check test\nlume \ud83d\udd25 =&gt; `test` is an available command \u2705 \n</code></pre> <p>Otherwise, if command is not available:</p> <pre><code>$ lume -check not-available-command\nlume \ud83d\udd25 =&gt; `not-available-command` is not available command \u274c \n</code></pre>"},{"location":"features/#os-specific-commands","title":"OS-specific commands","text":"<p>Define your os-specific command adding new fields on <code>run</code> commands with specific os keys (<code>linux</code>, <code>macos</code>, <code>macos-arm</code> and <code>windows</code>)</p> <p>Use it when installing dependencies:</p> <pre><code>install:\nrun:\nlinux:\n- sudo apt update\n- sudo apt install myprogram\nmacos:\n- brew install myprogram\nmacos-arm:\n- brew install myprogram\nall:\n- echo \"Installed :fire:\"\n</code></pre> <p>Or maybe for compiling a library with different flags depending on the <code>OS</code>.</p> <pre><code>steps:\nbuild:\nsetup:\nlinux: echo \"Linux Setup...\"\nmacos: echo \"MacOS Setup...\"\nwindows: echo \"Windows Setup...\"\nteardown:\nlinux: echo \"Linux Teardown...\"\nmacos: echo \"MacOS Teardown...\"\nwindows: echo \"Windows Teardown...\"\nrun:\nlinux: echo \"Building with Linux Compiler...\"\nmacos: echo \"Building with MacOS Compiler...\"\nwindows: echo \"Building with Windows Compiler...\"\nall: echo \"Checking Compiled Library...\"\n</code></pre> <p>Use <code>all-pre</code> and <code>all-post</code> to define the order of shared operations between OS.</p> <pre><code>install:\nrun:\nall-pre: echo \"Install pre-requirement\"\nlinux:\n- sudo apt update\n- sudo apt install myprogram\nmacos:\n- brew install myprogram\nmacos-arm:\n- brew install myprogram-arm\nall-post: echo \"Everything was successfully installed\"\n</code></pre> <p>Note</p> <p>When execute a cli lume command, first line will prompt something like <code>\ud83d\udd25 lume &lt;lume-version&gt; (&lt;your-platform&gt; -- Python &lt;python-version&gt;)</code>. So, you can check which os-related commands are going to be executed If you get <code>\ud83d\udd25 lume 0.8.8 (macos-arm -- Python 3.9.6)</code>, in addition to the common commands, will be executed <code>brew install myprogram-arm</code></p>"},{"location":"features/#use-several-lume-files","title":"Use several lume files","text":"<p>Imagine you have multiple steps, and you want to split them in several files.  You can do it using the <code>other_steps</code> option. Just add the following code to your root <code>lume.yml</code></p> <pre><code>steps:\nbuild:\nrun: echo \"Building...\"\nother_steps:\nother: examples/other-steps.yml\n</code></pre> <p>Being <code>other-steps.yml</code> something like the following:</p> <pre><code>steps:\nstep-1:\nrun: echo \"Other Step 1...\"\nstep-2:\nrun: echo \"Other Step 1...\"\n</code></pre> <p>To call use the name (in this case <code>other</code>) plus the step name (e.g <code>step-1</code>)</p> <pre><code>$ lume -other:step-1\n</code></pre> <p>You can setup some additional and specific env vars for these steps:</p> <pre><code>env:\nMY_OTHER_ENV: MY_VALUE\nsteps:\nstep-1:\nrun: echo \"Other Step 1...\"\nstep-2:\nrun: echo \"Other Step 1...\"\n</code></pre>"},{"location":"features/#several-commands-per-step","title":"Several commands per Step","text":"<p>Use the hyphen in order to define several commands per Step:</p> <pre><code>steps:\nclean:\nrun:\n- echo \"Cleaning dep1\"\n- echo \"Cleaning dep2\"\n</code></pre> <p>Or just use <code>|</code>:</p> <pre><code>steps:\nclean:\nrun: |\necho \"Cleaning dep1\"\necho \"Cleaning dep2\"\n</code></pre>"},{"location":"features/#setup-step","title":"Setup Step","text":"<p>Use <code>setup</code> step to manage downloading and unzipping dependencies form external resources (e.g <code>ftp</code> servers, <code>buckets</code>, etc..)</p> <pre><code>steps:\nsetup:\noutput: deps\ndeps:\nimages:\ntype: file\nurl: https://path/images.zip\nname: images\nauth_required: true\ncredentials_env: ENVVAR_CREDENTIALS\nunzip: true\nresources:\ntype: bucket\nurl: gs://alice-biometrics/resources.zip\nname: resources\nauth_required: true\ncredentials_env: GOOGLE_APPLICATION_CREDENTIALS\nunzip: true\nbuild:\nrun:\n- echo \"Creating dir\"\n- echo \"Building...\"\nlint:\nrun:\n- echo \"Checking code...\"\ndoc:\ncwd: examples\nrun:\n- echo $(pwd)\n- echo \"Doc is nice\"\nloop:\ncwd: examples\nrun:\n-  for((i=1;i&lt;=20000;i+=1)); do echo \"Welcome $i times\"; done\n</code></pre>"},{"location":"features/#inner-setup-and-teardown","title":"Inner Setup and Teardown","text":"<p>Define <code>setup</code> commands to execute operations that will be executed before <code>run</code> commands. Use <code>teardown</code> commands to define command to be executed after <code>run</code>.</p> <pre><code>name: lume-sample\nshow_exit_code: True\ninstall:\nrun: echo \"Installing...\"\nsteps:\nmy-step:\nsetup: echo \"Setup\"\nrun: echo \"Run\"\nteardown: echo \"Teardown\"\n</code></pre>"},{"location":"features/#set-environment-variables","title":"Set environment variables","text":"<p><code>lume</code> helps you on environment variables management:</p> <ul> <li>Set required environment variables</li> <li>Define shared envs for all the steps</li> <li>Define some envs for a specific step</li> </ul>"},{"location":"features/#required-envs","title":"Required envs","text":"<p>Define some required envs. This prevents failure and will raise a clear error (<code>EnvironmentError</code>).</p> <pre><code>name: lume-sample\nrequired_env:\nMY_REQUIRED_ENV: Neccesary to install private packages # example\nsteps:\nmy-step:\nrun: echo ${MY_REQUIRED_ENV}\n</code></pre>"},{"location":"features/#shared-envs","title":"Shared envs","text":"<p>Define your shared environment variables with <code>envs</code></p> <pre><code>name: lume-sample\nenv:\nMY_ENV: MY_VALUE\nsteps:\nmy-step:\nrun: echo ${MY_ENV}\n</code></pre> <p>Also, you can use a file to specify you environment variables:</p> <pre><code>name: lume-sample\nenv_file: path/to/my/env/file\nsteps:\nmy-step:\nrun: echo ${MY_ENV}\n</code></pre>"},{"location":"features/#step-envs","title":"Step envs","text":"<pre><code>name: lume-sample\ninstall:\nrun: echo \"Installing...\"\nsteps:\nmy-step:\nenv:\nMY_ENV: MY_VALUE\nrun: echo ${MY_ENV}\n</code></pre> <p>The output for this step will be something like the following:</p> <pre><code>$ lume -my-step\n\ud83d\udd25 Step: my-step\n\ud83d\udd38 env: set MY_ENV=MY_VALUE\n\ud83d\udcbb my-step &gt;&gt; echo ${MY_ENV}\n    MY_VALUE\n</code></pre> <p>Note that if you previously defined an env, it will be overwrote during the step.</p> <p>You can also define variable from external filename (e.g env.yml):</p> <p>env.yml: <pre><code>TEST: SHARED_VALUE\nMY_MANAGER: LUME\nLUME_CONFIG_FILENAME: filename\n</code></pre></p> <p>lume.yml: <pre><code>steps:\nenvs-file-example:\nenv_file: examples/env.yml\nrun: echo \"${MY_ENV}\"\n</code></pre></p>"},{"location":"features/#detach-setup","title":"Detach Setup","text":"<p>With <code>setup_detach</code> option, you can execute a detached command (e.g a service). Then, after the main <code>run</code> command, this proccess will be automatically killed.</p> <p>This is very useful to test services locally:</p> <pre><code>name: lume-sample\nshow_exit_code: True\ninstall:\nrun: echo \"Installing...\"\nsteps:\nmy-step:\nsetup_detach:\nlog_filename: taskmanager.log\nrun: python -m taskmanager #\u00a0service\nrun: pytest\n</code></pre>"},{"location":"features/#wait","title":"Wait","text":"<p>Wait few seconds with <code>wait_seconds</code>:</p> <pre><code>steps:\nwait-example-seconds:\nwait_seconds: 2\nrun: echo \"Done\"\n</code></pre> <p>Wait for a 200 calling a HTTP url:</p> <pre><code>steps:\n  wait-example-http:\n    wait_http_200: https://www.google.com\n    run: echo \"Done\"\n</code></pre> <p>You can configure the following parameters via env:</p> <ul> <li><code>LUME_WAIT_HTTP_200_NUM_MAX_ATTEMPTS</code></li> <li><code>LUME_WAIT_HTTP_200_WAIT_SECONDS_RETRY</code></li> </ul> <p>Example: <pre><code>steps:\nwait-example-http:\nenv: LUME_WAIT_HTTP_200_NUM_MAX_ATTEMPTS: 10\nLUME_WAIT_HTTP_200_WAIT_SECONDS_RETRY: 0.5\nwait_http_200: https://www.google.com\nrun: echo \"Done\"\n</code></pre></p> <p>Also, you can wait for a list of urls: <pre><code>steps:\nwait-example-http:\nwait_http_200: - https://www.google.com\n- https://www.elastic.co\n- https://grafana.com\nrun: echo \"Done\"\n</code></pre></p>"},{"location":"features/#-no-strict-mode","title":"<code>--no-strict</code> mode","text":"<p>If you use lume with a command (step) that is not available on the <code>lume.yml</code>, this will fail and return an exit code 1.</p> <p>However, if you use <code>--no-strict</code> mode, lume will warn you but the execution will be a success returning 0 as exit code. You can also use the <code>LUME_NO_STRICT</code> env var to solve the same issue: <code>export LUME_NO_STRICT=true</code></p> <p>Use Case: This feature could be very useful if you are generalizing a continuous integration workflow. Imagine that you have projects where you need a setup process and in others you do not. Use <code>lume -setup --no-strict</code> to avoid conflicts in your workflow.</p> <p>Additionally, the <code>no-strict</code> mode could help us to skip <code>required_env</code> strict check in some environments.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>lume is a simple way to organize your daily software development operations (installation, setup, code compilation, test, etc..)</p>"},{"location":"getting_started/#configuration-file","title":"Configuration File","text":"<p>If you want to use lume in your project, just add a <code>lume.yml</code> in your root.</p> <pre><code>name: lume-sample\ninstall:\nrun: echo \"Installing...\"\nuninstall:\nrun: echo \"Uninstalling...\"\nsteps:\nclean:\nrun: echo \"Cleaning folder1\"\nbuild:\nrun: echo \"Building...\"\ntest:\nrun: echo \"Testing...\"\n</code></pre> <p>If you want lume to print the program exit code, just type <code>show_exit_code: True</code> in <code>settings</code> in the <code>lume.yml</code></p> <pre><code>settings:\nshow_exit_code: True\n</code></pre> <p>Use <code>help</code> to know <code>lume</code> available commands. <code>lume</code> is dynamic, so the steps we are defining will be shown here automatically.</p> <pre><code>$ lume --help\nusage: lume \ud83d\udd25 [-h] [-v] [-all] [-clean] [-build] [-test] [-install]\nLume helps you with your daily dev operations and ease the CI &amp; CD process.\noptional arguments:\n  -h, --help              show this help message and exit\n  -v, --version           show lume version number.\n  -all, --all-commands    run all commands\n  -check CHECK, --check   CHECK\n                          check if lume command is available or not\n  -clean, --clean         clean\n  -build, --build         build\n  -test, --test           test\n  -install, --install     install\n  -uninstall, --uninstall uniinstall\n</code></pre> <p>Note</p> <p>In case you want to change the name of the lume configuration file or just store in another folder, please use <code>LUME_CONFIG_FILENAME</code> environment variable.</p> <p><pre><code>$ export LUME_CONFIG_FILENAME=examples/lume-sample.yml\n$ lume --help\n</code></pre> </p>"},{"location":"getting_started/#run-defined-steps","title":"Run Defined Steps","text":"<p>To run install:</p> <pre><code>$ lume -install\n</code></pre> <p>To run uninstall:</p> <pre><code>$ lume -uninstall\n</code></pre> <p>To run all the steps:</p> <pre><code>$ lume -all\n</code></pre> <p>Of course, you can run every step individually:</p> <pre><code>$ lume -clean\n</code></pre> <p>Or several steps:</p> <pre><code>$ lume -build -test\n</code></pre> <p>Here is an example of the log output that would have lume using several commands defined previously on Configuration File:</p> <pre><code>$ lume -install -all\n\ud83d\udd25 Step: install\n\ud83d\udcbb install &gt;&gt; echo \"Installing...\"\n Installing...\n \ud83d\udd25 Step: clean\n\ud83d\udcbb clean &gt;&gt; echo \"Cleaning...\"\n Cleaning...\n\ud83d\udd25 Step: build\n\ud83d\udcbb build &gt;&gt; echo \"Building...\"\n Building...\n\ud83d\udd25 Step: test\n\ud83d\udcbb test &gt;&gt; echo \"Testing (Unit)...\"\n Testing (Unit)...\n\ud83d\udcbb test &gt;&gt; echo \"Testing (Integration)...\"\n Testing (Integration)...\n\ud83d\udd25 Step: error\n\ud83d\udcbb error [cwd=examples] &gt;&gt; echo \"This is an error\" &gt;&gt;/dev/stderr\n\ud83e\uddd0 This is an error\n</code></pre>"},{"location":"github_actions/","title":"GitHub Actions","text":"<p>Performs continuos integrations steps using Python package <code>lume</code>. </p> <p>This workflow will run the following steps:</p> <ul> <li>lint</li> <li>check-requirements</li> <li>static-analysis</li> <li>test-unit</li> <li>test-integration</li> <li>test-acceptance</li> </ul> <p>Example:</p> <pre><code>  ci:\nuses: alice-biometrics/actions/.github/workflows/lume-ci.yml@main\nwith:\nlanguage: python\n</code></pre>"},{"location":"github_actions/#inputs","title":"Inputs","text":"Name Requirement Default Description <code>language</code> required Select the language (Use python or node) <code>lume_version</code> optional latest Select the lume version if required. Check the release history <code>lume_config_filename</code> optional lume.yml In case you want to change the name of the lume configuration file or just store in another folder <code>pre_commands</code> optional Set additional lume commands to be executed at the begining of the required ones. Use commas if you need to execute several commands <code>post_setup_commands</code> optional Set additional lume commands to be executed after the setup and before required ones. Use commas if you need to execute several commands <code>post_commands</code> optional Set additional lume commands to be executed at the end of the required ones. Use commas if you need to execute several commands"},{"location":"github_actions/#secrets","title":"Secrets","text":"Name Requirement Description <code>github_access_token</code> optional Only required if you need the token to be passed to requirements or dependency manager <code>gke_project</code> optional ID of the Google Cloud Platform project. If provided, this will configure <code>gcloud</code> to use this project ID by default for commands. <code>gke_key</code> optional The service account key which will be used for authentication credentials. This key should be created and stored as a secret. It can be encoded as a Base64 string or as JSON."},{"location":"github_actions/#lume-config-file-required-in-your-repository","title":"Lume Config File (Required in your repository)","text":"<p>To make it work, it is necessary to have a lume file in the root with at least the following commands (Python example):</p> <pre><code>name: Testing\ninstall:\nrun: pip install --upgrade --upgrade-strategy eager -r requirements/dev-requirements.txt -r requirements/requirements.txt\nsteps:\nclean:\nrun: echo \"clean\"\nlint:\nrun:\n- black --check .\n- flake8 tests\ncheck-requirements:\nrun: safety check -r requirements/requirements.txt\ntest-unit:\nrun: echo \"test-unit\"\ntest-integration:\nrun: echo \"test-integration\"\ntest-acceptance:\nrun: echo \"test-acceptance\"\n</code></pre> <p>If you want to change or fix a lume version and also execute additional lume commands, you can do it with the following code: <pre><code>  ci:\nuses: alice-biometrics/actions/.github/workflows/lume-ci.yml@main\nwith:\nlanguage: python\nlume_version: 0.5.2\npre_commands: pre-command # should be available on lume.yml otherwise those won't be executed\npost_setup_commands: build # should be available on lume.yml otherwise those won't be executed\npost_commands: my-additional-command-1,my-additional-command-2 # should be available on lume.yml otherwise those won't be executed\n</code></pre></p>"},{"location":"github_actions/#workflow-code","title":"Workflow Code","text":"<p>Check current code in lume-ci.yml:</p> <pre><code>name: Lume CI\non:\nworkflow_call:\ninputs:\nlanguage:\nrequired: true\ntype: string\ndefault: python\ndescription: Select the language (Use python or node)\npython_version:\nrequired: false\ntype: string\ndefault: 3.9\nruns_on:\nrequired: false\ntype: string\ndefault: ubuntu-latest\nlume_version:\nrequired: false\ntype: string\ndefault: latest\nlume_config_filename:\nrequired: false\ntype: string\ndefault: lume.yml\npre_commands:\nrequired: false\ntype: string\ndefault: \"\"\npost_setup_commands:\nrequired: false\ntype: string\ndefault: \"\"\npost_commands:\nrequired: false\ntype: string\ndefault: \"\"\nuse_cache:\nrequired: false\ntype: boolean\ndefault: true\nworking_directory:\nrequired: false\ntype: string\ndefault: .\nsecrets:\ngke_project:\nrequired: false\ngke_key:\nrequired: false\ngithub_access_token:\nrequired: false\nenv:\nLUME_CONFIG_FILENAME: ${{ inputs.lume_config_filename}}\nGITHUB_ACCESS_TOKEN: ${{ secrets.github_access_token}}\nGKE_PROJECT: ${{ secrets.gke_project}}\nGKE_KEY: ${{ secrets.gke_key}}\njobs:\nlume-ci:\nname: Lume CI\nruns-on: ${{ inputs.runs_on }}\ntimeout-minutes: 30\nsteps:\n- uses: actions/checkout@v3\n- name: Authenticate to Google Cloud\nif: env.GKE_PROJECT &amp;&amp; env.GKE_KEY\nuses: google-github-actions/auth@v0\nwith:\ncredentials_json: ${{ secrets.gke_key }}\n- name: Set up Cloud SDK\nif: env.GKE_PROJECT &amp;&amp; env.GKE_KEY\nuses: google-github-actions/setup-gcloud@v0\n- name: Setup Python (without cache)\nif: ${{ inputs.language == 'python' &amp;&amp; inputs.use_cache == false }}\nuses: actions/setup-python@v3\nwith:\npython-version: ${{ inputs.python_version }}\n- name: Setup Python (with cache)\nif: ${{ inputs.language == 'python' &amp;&amp; inputs.use_cache == true }}\nuses: actions/setup-python@v3\nwith:\npython-version: ${{ inputs.python_version }}\ncache: pip\ncache-dependency-path: '**/*requirements.txt'\n- name: Setup Node\nuses: actions/setup-node@v3\nif: ${{ inputs.language == 'node' }}\nwith:\nnode-version: 12\nregistry-url: https://npm.pkg.github.com\nalways-auth: true\ncache: 'yarn'\n- name: Lume\nworking-directory: ${{inputs.working_directory}}\nrun: |\nversion=${{ inputs.lume_version}}\nif [ \"$version\" = \"latest\" ]; then\npip install -U lume\nelse\npip install -U lume==$version\nfi\n- name: Pre Commands\nif: ${{ inputs.pre_commands != '' }}\nworking-directory: ${{inputs.working_directory}}\nrun: |\nIFS=\",\"\nread -r -a pre_commands &lt;&lt;&lt; \"${{ inputs.pre_commands}}\"\nif [[ ${#pre_commands[@]} &gt; 1 ]]; then\nfor command in ${pre_commands[@]}; do lume -$command; done\nelif  [[ ${#pre_commands[@]} = 1 ]]; then\necho \"lume -$pre_commands\" | bash -\nfi\n- name: Install\nworking-directory: ${{inputs.working_directory}}\nrun: lume -install\n- name: Setup (If required)\nworking-directory: ${{inputs.working_directory}}\nrun: lume -setup --no-strict\n- name: Post Setup Commands\nworking-directory: ${{inputs.working_directory}}\nif: ${{ inputs.post_setup_commands != '' }}\nrun: |\nIFS=\",\" \nread -r -a post_setup_commands &lt;&lt;&lt; \"${{ inputs.post_setup_commands}}\"\nif [[ ${#post_setup_commands[@]} &gt; 1 ]]; then\nfor command in ${post_setup_commands[@]}; do lume -$command; done\nelif  [[ ${#post_setup_commands[@]} = 1 ]]; then\necho \"lume -$post_setup_commands\" | bash -\nfi\n- name: Check Requirements\nworking-directory: ${{inputs.working_directory}}\nrun: lume -check-requirements\n- name: Static Analysis\nworking-directory: ${{inputs.working_directory}}\nrun: lume -static-analysis\n- name: Lint\nworking-directory: ${{inputs.working_directory}}\nrun: lume -lint\n- name: Unit Tests\nworking-directory: ${{inputs.working_directory}}\nrun: lume -test-unit\n- name: Integration Tests\nworking-directory: ${{inputs.working_directory}}\nrun: lume -test-integration\n- name: Acceptance Tests\nworking-directory: ${{inputs.working_directory}}\nrun: lume -test-acceptance\n- name: Post Commands\nworking-directory: ${{inputs.working_directory}}\nif: ${{ inputs.post_commands != '' }}\nrun: |\nIFS=\",\" \nread -r -a post_commands &lt;&lt;&lt; \"${{ inputs.post_commands}}\"\nif [[ ${#post_commands[@]} &gt; 1 ]]; then\nfor command in ${post_commands[@]}; do lume -$command; done\nelif  [[ ${#post_commands[@]} = 1 ]]; then\necho \"lume -$post_commands\" | bash -\nfi\n</code></pre>"},{"location":"install/","title":"Install","text":"<p>Installation is as simple as:</p> <pre><code>$ pip install lume\n---&gt; 100%\nSuccessfully installed lume\n</code></pre> <p>This will install the latest version of lume package \u270c\ufe0f  </p>"},{"location":"install/#requirements","title":"Requirements","text":"<pre><code>meiga&lt;2\npydantic&lt;2\npyyaml&lt;7\ngoogle-cloud-storage&gt;= 1.32.0, &lt; 3.0.0dev\ngoogle-api-core&lt;3\nprotobuf&gt;=3.12.0,&lt;4\n</code></pre>"}]}